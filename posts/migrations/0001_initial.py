# Generated by Django 5.2.3 on 2025-06-21 08:32

import django.db.models.deletion
import posts.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PollOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(default=posts.models.generate_uid, max_length=50, unique=True)),
                ('content', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='PollVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('poll_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='posts.polloption')),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(default='')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PostCommentPic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField(default='')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pics', to='posts.postcomment')),
            ],
        ),
        migrations.CreateModel(
            name='PostCommentReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(default='')),
                ('comment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='posts.postcomment')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PostCommentReplyPic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField(default='')),
                ('reply', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pics', to='posts.postcommentreply')),
            ],
        ),
        migrations.CreateModel(
            name='PostMetaData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(default=posts.models.generate_uid, max_length=50, unique=True)),
                ('privacy', models.CharField(choices=[('Public', 'Public'), ('Followers', 'Followers'), ('Only me', 'Only me')], default='Public', max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_metadata', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Post Meta Data',
            },
        ),
        migrations.CreateModel(
            name='PostImageUrl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField()),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imageurls', to='posts.postmetadata')),
            ],
        ),
        migrations.CreateModel(
            name='PostEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(default=posts.models.generate_uid, max_length=50, unique=True)),
                ('title', models.TextField(default='Epic event!')),
                ('date', models.BigIntegerField(default=-1)),
                ('time', models.CharField(blank=True, default='', max_length=20, null=True)),
                ('country', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('city', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('place_id', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('longitude', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('latitude', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('post_code', models.CharField(blank=True, max_length=15, null=True)),
                ('description', models.TextField(blank=True, default='Epic event!', null=True)),
                ('metadata', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='event', to='posts.postmetadata')),
            ],
        ),
        migrations.AddField(
            model_name='postcomment',
            name='metadata',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='posts.postmetadata'),
        ),
        migrations.CreateModel(
            name='PostPoll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(default=posts.models.generate_uid, max_length=50, unique=True)),
                ('title', models.TextField(default='')),
                ('poll_type', models.CharField(choices=[('Single', 'Single'), ('Multiple', 'Multiple')], default='Single', max_length=15)),
                ('metadata', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='poll', to='posts.postmetadata')),
            ],
        ),
        migrations.AddField(
            model_name='polloption',
            name='poll',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='posts.postpoll'),
        ),
        migrations.CreateModel(
            name='PostText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(default=posts.models.generate_uid, max_length=50, unique=True)),
                ('content', models.TextField(default='')),
                ('metadata', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='text', to='posts.postmetadata')),
            ],
        ),
        migrations.CreateModel(
            name='PostVideoUrl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField()),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videourls', to='posts.postmetadata')),
            ],
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='posts.postmetadata')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('metadata', 'user'), name='unique_liker')],
            },
        ),
    ]
